version: '3.8'

services:
  roc-cluster-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: roc-cluster-api
    ports:
      - "8000:8000"
    environment:
      # API Configuration
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=False
      - LOG_LEVEL=INFO
      
      # Database Configuration
      - DATABASE_URL=sqlite:///./data/roc_cluster.db
      
      # ROC Website Configuration
      - ROC_BASE_URL=https://rocgame.com
      - ROC_LOGIN_URL=https://rocgame.com/login
      - ROC_HOME_URL=https://rocgame.com/home
      
      # Database Pool Settings
      - DB_POOL_SIZE=20
      - DB_MAX_OVERFLOW=30
      - DB_POOL_TIMEOUT=30
      - DB_POOL_RECYCLE=3600
      
      # Request Settings
      - REQUEST_TIMEOUT=30
      - MAX_CONCURRENT_REQUESTS=10

      # Captch Solver
      - CAPTCHA_SOLVER_URL=http://localhost:8001/api/v1/solve
      - CAPTCHA_REPORT_URL=http://localhost:8001/api/v1/feedback
      - CAPTCHA_CONNECTION_LIMIT=50
      - CAPTCHA_CONNECTION_LIMIT_PER_HOST=50
      - CAPTCHA_TIMEOUT=30
      
    volumes:
      # Persist database and logs
      - ./data:/app/data
      - ./logs:/app/logs
      - ./errors:/app/errors
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - roc-network

  # Optional: Add a reverse proxy for production
  # nginx:
  #   image: nginx:alpine
  #   container_name: roc-cluster-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - roc-cluster-api
  #   restart: unless-stopped
  #   networks:
  #     - roc-network
  #   profiles:
  #     - production

networks:
  roc-network:
    driver: bridge

volumes:
  roc-data:
    driver: local
  roc-logs:
    driver: local
